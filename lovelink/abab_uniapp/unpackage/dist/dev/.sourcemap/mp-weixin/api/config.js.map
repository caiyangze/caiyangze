{"version":3,"file":"config.js","sources":["api/config.js"],"sourcesContent":["/**\r\n * API配置文件\r\n * 集中管理API相关的配置，避免敏感信息泄露\r\n */\r\n\r\n// 环境配置\r\nexport const ENV = {\r\n  development: {\r\n    BASE_URL: process.env.VUE_APP_API_URL || 'http://localhost:9001',\r\n    WS_URL: process.env.VUE_APP_WS_URL || 'ws://localhost:9001',\r\n    API_VERSION: process.env.VUE_APP_API_VERSION || '/api/v1'\r\n  },\r\n  production: {\r\n    BASE_URL: process.env.VUE_APP_API_URL || 'https://api.example.com',\r\n    WS_URL: process.env.VUE_APP_WS_URL || 'wss://api.example.com',\r\n    API_VERSION: process.env.VUE_APP_API_VERSION || '/api/v1'\r\n  },\r\n  test: {\r\n    BASE_URL: process.env.VUE_APP_TEST_API_URL || 'https://test-api.example.com',\r\n    WS_URL: process.env.VUE_APP_TEST_WS_URL || 'wss://test-api.example.com',\r\n    API_VERSION: process.env.VUE_APP_API_VERSION || '/api/v1'\r\n  }\r\n};\r\n\r\n// 当前环境\r\nexport const CURRENT_ENV = process.env.NODE_ENV || 'development';\r\n\r\n// 基础配置\r\nexport const CONFIG = {\r\n  // 请求超时时间（毫秒）\r\n  TIME_OUT: 10000,\r\n  \r\n  // 最大重试次数\r\n  MAX_RETRY: 2,\r\n  \r\n  // 是否开启调试日志\r\n  DEBUG: CURRENT_ENV === 'development',\r\n  \r\n  // 是否使用加密传输\r\n  USE_ENCRYPTION: CURRENT_ENV === 'production',\r\n  \r\n  // 是否自动刷新token\r\n  AUTO_REFRESH_TOKEN: true,\r\n  \r\n  // Token相关\r\n  TOKEN: {\r\n    // 存储键名\r\n    KEY: 'token',\r\n    // 刷新Token键名\r\n    REFRESH_KEY: 'refreshToken',\r\n    // 过期时间（毫秒）\r\n    EXPIRES_IN: 7 * 24 * 60 * 60 * 1000, // 7天\r\n    // 刷新阈值（毫秒），提前多久刷新token\r\n    REFRESH_THRESHOLD: 30 * 60 * 1000 // 30分钟\r\n  },\r\n  \r\n  // 错误码映射\r\n  ERROR_CODES: {\r\n    SUCCESS: 200,\r\n    UNAUTHORIZED: 401,\r\n    NOT_LOGGED_IN: 402,\r\n    FORBIDDEN: 403,\r\n    NOT_FOUND: 404,\r\n    SERVER_ERROR: 500\r\n  }\r\n};\r\n\r\n/**\r\n * 获取API基础URL（不含API版本）\r\n * @returns {string} API基础URL\r\n */\r\nexport const getBaseUrl = () => {\r\n  return ENV[CURRENT_ENV].BASE_URL;\r\n};\r\n\r\n/**\r\n * 获取WebSocket URL\r\n * @returns {string} WebSocket URL\r\n */\r\nexport const getWebSocketUrl = () => {\r\n  return ENV[CURRENT_ENV].WS_URL;\r\n};\r\n\r\n/**\r\n * 获取API路径\r\n * @param {string} path API路径\r\n * @returns {string} 完整API路径\r\n */\r\nexport const getApiPath = (path) => {\r\n  // 如果是完整URL，直接返回\r\n  if (/^(http|https):\\/\\//.test(path)) {\r\n    return path;\r\n  }\r\n\r\n  // 确保path以/开头\r\n  const formattedPath = path.startsWith('/') ? path : `/${path}`;\r\n\r\n  // 如果路径已经包含API版本前缀，则直接使用基础URL\r\n  if (formattedPath.startsWith(ENV[CURRENT_ENV].API_VERSION)) {\r\n    // 从路径中移除API版本前缀\r\n    const actualPath = formattedPath.substring(ENV[CURRENT_ENV].API_VERSION.length);\r\n    return getBaseUrl() + actualPath;\r\n  }\r\n\r\n  // 否则，直接添加到基础URL\r\n  return getBaseUrl() + formattedPath;\r\n};\r\n\r\nexport default {\r\n  ENV,\r\n  CURRENT_ENV,\r\n  CONFIG,\r\n  getBaseUrl,\r\n  getWebSocketUrl,\r\n  getApiPath\r\n};"],"names":[],"mappings":";AAMO,MAAM,MAAM;AAAA,EACjB,aAAa;AAAA,IACX,UAAU,QAAQ,IAAI,mBAAmB;AAAA,IACzC,QAAQ,QAAQ,IAAI,kBAAkB;AAAA,IACtC,aAAa,QAAQ,IAAI,uBAAuB;AAAA,EAClD;AAAA,EACA,YAAY;AAAA,IACV,UAAU,QAAQ,IAAI,mBAAmB;AAAA,IACzC,QAAQ,QAAQ,IAAI,kBAAkB;AAAA,IACtC,aAAa,QAAQ,IAAI,uBAAuB;AAAA,EAClD;AAAA,EACA,MAAM;AAAA,IACJ,UAAU,QAAQ,IAAI,wBAAwB;AAAA,IAC9C,QAAQ,QAAQ,IAAI,uBAAuB;AAAA,IAC3C,aAAa,QAAQ,IAAI,uBAAuB;AAAA,EAClD;AACF;AAGO,MAAM,cAAc;AAGpB,MAAM,SAAS;AAAA;AAAA,EAEpB,UAAU;AAAA;AAAA,EAGV,WAAW;AAAA;AAAA,EAGX,OAAO,gBAAgB;AAAA;AAAA,EAGvB,gBAAgB,gBAAgB;AAAA;AAAA,EAGhC,oBAAoB;AAAA;AAAA,EAGpB,OAAO;AAAA;AAAA,IAEL,KAAK;AAAA;AAAA,IAEL,aAAa;AAAA;AAAA,IAEb,YAAY,IAAI,KAAK,KAAK,KAAK;AAAA;AAAA;AAAA,IAE/B,mBAAmB,KAAK,KAAK;AAAA;AAAA,EAC/B;AAAA;AAAA,EAGA,aAAa;AAAA,IACX,SAAS;AAAA,IACT,cAAc;AAAA,IACd,eAAe;AAAA,IACf,WAAW;AAAA,IACX,WAAW;AAAA,IACX,cAAc;AAAA,EAChB;AACF;AAMO,MAAM,aAAa,MAAM;AACvB,SAAA,IAAI,WAAW,EAAE;AAC1B;AAMO,MAAM,kBAAkB,MAAM;AAC5B,SAAA,IAAI,WAAW,EAAE;AAC1B;AAOa,MAAA,aAAa,CAAC,SAAS;AAE9B,MAAA,qBAAqB,KAAK,IAAI,GAAG;AAC5B,WAAA;AAAA,EACT;AAGA,QAAM,gBAAgB,KAAK,WAAW,GAAG,IAAI,OAAO,IAAI,IAAI;AAG5D,MAAI,cAAc,WAAW,IAAI,WAAW,EAAE,WAAW,GAAG;AAE1D,UAAM,aAAa,cAAc,UAAU,IAAI,WAAW,EAAE,YAAY,MAAM;AAC9E,WAAO,WAAe,IAAA;AAAA,EACxB;AAGA,SAAO,WAAe,IAAA;AACxB;AAEA,MAAe,SAAA;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;;"}
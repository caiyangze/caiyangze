{"version":3,"file":"http.js","sources":["api/http.js"],"sourcesContent":["/**\r\n * HTTP请求封装\r\n */\r\n\r\nimport config from './config';\r\n\r\n// 基础配置\r\nconst CONFIG = config.CONFIG;\r\n\r\n// 请求计数器（用于防止重复请求）\r\nconst pendingRequests = new Map();\r\n\r\n/**\r\n * 生成请求Key\r\n * @param {Object} config 请求配置\r\n */\r\nconst generateRequestKey = (config) => {\r\n  const { url, method, data } = config;\r\n  return `${method}:${url}:${JSON.stringify(data || {})}`;\r\n};\r\n\r\n/**\r\n * 取消重复请求\r\n * @param {Object} config 请求配置\r\n */\r\nconst removePendingRequest = (config) => {\r\n  const requestKey = generateRequestKey(config);\r\n  if (pendingRequests.has(requestKey)) {\r\n    const abortController = pendingRequests.get(requestKey);\r\n    abortController.abort();\r\n    pendingRequests.delete(requestKey);\r\n  }\r\n};\r\n\r\n/**\r\n * 添加请求到待处理列表\r\n * @param {Object} config 请求配置\r\n */\r\nconst addPendingRequest = (config) => {\r\n  const requestKey = generateRequestKey(config);\r\n  if (config.cancelDuplicated && !pendingRequests.has(requestKey)) {\r\n    const abortController = new AbortController();\r\n    config.signal = abortController.signal;\r\n    pendingRequests.set(requestKey, abortController);\r\n  }\r\n};\r\n\r\n/**\r\n * 请求完成后从待处理列表移除\r\n * @param {Object} config 请求配置\r\n */\r\nconst removePendingRequestAfterCompletion = (config) => {\r\n  const requestKey = generateRequestKey(config);\r\n  pendingRequests.delete(requestKey);\r\n};\r\n\r\n/**\r\n * 刷新Token\r\n */\r\nconst refreshToken = async function() {\r\n  try {\r\n    const refreshToken = uni.getStorageSync(CONFIG.TOKEN.REFRESH_KEY);\r\n    if (!refreshToken) {\r\n      throw new Error('No refresh token available');\r\n    }\r\n    \r\n    const response = await uni.request({\r\n      url: config.getApiPath('/api/v1/auth/refresh'),\r\n      method: 'POST',\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${refreshToken}`\r\n      },\r\n      data: {}\r\n    });\r\n    \r\n    if (response.statusCode === 200 && response.data.code === 200) {\r\n      uni.setStorageSync(CONFIG.TOKEN.KEY, response.data.data.token);\r\n      uni.setStorageSync(CONFIG.TOKEN.REFRESH_KEY, response.data.data.refreshToken);\r\n      return response.data.data.token;\r\n    } else {\r\n      throw new Error('Failed to refresh token');\r\n    }\r\n  } catch (error) {\r\n    console.error('Token refresh failed:', error);\r\n    // 清除登录状态\r\n    uni.removeStorageSync(CONFIG.TOKEN.KEY);\r\n    uni.removeStorageSync(CONFIG.TOKEN.REFRESH_KEY);\r\n    \r\n    // 跳转到登录页\r\n    uni.reLaunch({\r\n      url: '/pages/login/login'\r\n    });\r\n    \r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * 请求拦截器\r\n * @param {Object} config 请求配置\r\n */\r\nconst requestInterceptor = (config) => {\r\n  // 获取token\r\n  const token = uni.getStorageSync(CONFIG.TOKEN.KEY);\r\n  \r\n  // 设置请求头\r\n  if (!config.header) {\r\n    config.header = {};\r\n  }\r\n  \r\n  // 设置Content-Type\r\n  if (!config.header['Content-Type']) {\r\n    config.header['Content-Type'] = 'application/json';\r\n  }\r\n  \r\n  // 添加token到请求头\r\n  if (token) {\r\n    config.header['token'] = token;\r\n    config.header['Authorization'] = `Bearer ${token}`;\r\n    console.log('设置请求头token:', token.substring(0, 20) + '...');\r\n  } else {\r\n    console.warn('请求时没有token');\r\n  }\r\n  \r\n  // 添加防重放攻击参数\r\n  if (config.preventReplay) {\r\n    const timestamp = Date.now();\r\n    const nonce = Math.random().toString(36).substring(2, 15);\r\n    config.header['X-Timestamp'] = timestamp;\r\n    config.header['X-Nonce'] = nonce;\r\n    \r\n    // 可以在这里添加签名逻辑\r\n    // const signature = generateSignature(config.url, timestamp, nonce, token);\r\n    // config.header['X-Signature'] = signature;\r\n  }\r\n  \r\n  // 处理重复请求\r\n  if (config.cancelDuplicated) {\r\n    removePendingRequest(config);\r\n    addPendingRequest(config);\r\n  }\r\n  \r\n  // 数据加密 (生产环境)\r\n  if (CONFIG.USE_ENCRYPTION && config.data && typeof config.data === 'object') {\r\n    // 这里可以添加数据加密逻辑\r\n    // config.data = encryptData(config.data);\r\n    // config.header['X-Encrypted'] = '1';\r\n  }\r\n  \r\n  return config;\r\n};\r\n\r\n/**\r\n * 响应拦截器\r\n * @param {Object} response 响应结果\r\n * @param {Object} config 请求配置\r\n */\r\nconst responseInterceptor = async (response, config) => {\r\n  // 从待处理请求中移除\r\n  if (config.cancelDuplicated) {\r\n    removePendingRequestAfterCompletion(config);\r\n  }\r\n  \r\n  // 请求成功\r\n  if (response.statusCode === 200) {\r\n    const { code, message, data } = response.data;\r\n    \r\n    // 业务成功\r\n    if (code === CONFIG.ERROR_CODES.SUCCESS) {\r\n      return Promise.resolve(response.data);\r\n    } \r\n    // Token过期\r\n    else if (code === CONFIG.ERROR_CODES.UNAUTHORIZED) {\r\n      // 如果配置了自动刷新token\r\n      if (CONFIG.AUTO_REFRESH_TOKEN && !config.isRefreshingToken) {\r\n        const newToken = await refreshToken();\r\n        if (newToken) {\r\n          // 使用新token重试请求\r\n          config.header['Authorization'] = `Bearer ${newToken}`;\r\n          return request(config);\r\n        }\r\n      } else {\r\n        // 清除本地token\r\n        uni.removeStorageSync(CONFIG.TOKEN.KEY);\r\n        uni.removeStorageSync(CONFIG.TOKEN.REFRESH_KEY);\r\n        \r\n        // 跳转到登录页\r\n        uni.reLaunch({\r\n          url: '/pages/login/login'\r\n        });\r\n        \r\n        return Promise.reject(response.data);\r\n      }\r\n    }\r\n    // 未登录\r\n    else if (code === CONFIG.ERROR_CODES.NOT_LOGGED_IN) {\r\n      // 清除本地token\r\n      uni.removeStorageSync(CONFIG.TOKEN.KEY);\r\n      uni.removeStorageSync(CONFIG.TOKEN.REFRESH_KEY);\r\n      \r\n      // 跳转到登录页\r\n      uni.reLaunch({\r\n        url: '/pages/login/login'\r\n      });\r\n      \r\n      return Promise.reject(response.data);\r\n    } \r\n    // 权限不足\r\n    else if (code === CONFIG.ERROR_CODES.FORBIDDEN) {\r\n      uni.showToast({\r\n        title: message || '权限不足',\r\n        icon: 'none'\r\n      });\r\n      \r\n      return Promise.reject(response.data);\r\n    } \r\n    // 其他业务错误\r\n    else {\r\n      if (!config.hideErrorToast) {\r\n        uni.showToast({\r\n          title: message || '请求失败',\r\n          icon: 'none'\r\n        });\r\n      }\r\n      \r\n      return Promise.reject(response.data);\r\n    }\r\n  } \r\n  // 请求失败\r\n  else {\r\n    if (!config.hideErrorToast) {\r\n      uni.showToast({\r\n        title: '网络请求失败',\r\n        icon: 'none'\r\n      });\r\n    }\r\n    \r\n    return Promise.reject(response);\r\n  }\r\n};\r\n\r\n/**\r\n * 发起请求\r\n * @param {Object} config 请求配置\r\n */\r\nconst request = (requestConfig) => {\r\n  // 应用请求拦截器\r\n  const requestWithConfig = requestInterceptor(requestConfig);\r\n  \r\n  // 完整URL (使用getApiPath处理路径)\r\n  let url;\r\n  if (/^(http|https):\\/\\//.test(requestWithConfig.url)) {\r\n    // 如果是完整URL，直接使用\r\n    url = requestWithConfig.url;\r\n  } else {\r\n    // 处理API路径\r\n    if (requestWithConfig.url.startsWith('/api/v1/')) {\r\n      // 如果路径以/api/v1/开头，去掉前缀\r\n      const path = requestWithConfig.url.substring(7); // 去掉/api/v1前缀\r\n      url = `${config.getBaseUrl()}${path.startsWith('/') ? path : `/${path}`}`;\r\n    } else {\r\n      // 使用导入的config.getApiPath方法处理其他路径\r\n      url = config.getApiPath(requestWithConfig.url);\r\n    }\r\n  }\r\n  \r\n  // 调试日志\r\n  console.log(`[HTTP] ${requestWithConfig.method || 'GET'} ${requestWithConfig.url} -> ${url}`, requestWithConfig.data || {});\r\n  console.log('请求配置:', requestWithConfig);\r\n  console.log('BASE_URL:', config.getBaseUrl());\r\n  \r\n  // 返回Promise\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url,\r\n      data: requestWithConfig.data,\r\n      method: requestWithConfig.method || 'GET',\r\n      header: requestWithConfig.header,\r\n      timeout: requestWithConfig.timeout || CONFIG.TIME_OUT,\r\n      success: async (res) => {\r\n        try {\r\n          // 调试日志\r\n          console.log(`[HTTP Response] ${requestWithConfig.method || 'GET'} ${url}`, res);\r\n          \r\n          const result = await responseInterceptor(res, requestWithConfig);\r\n          resolve(result);\r\n        } catch (error) {\r\n          console.error(`[HTTP Error] ${requestWithConfig.method || 'GET'} ${url}`, error);\r\n          reject(error);\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        // 从待处理请求中移除\r\n        if (requestWithConfig.cancelDuplicated) {\r\n          removePendingRequestAfterCompletion(requestWithConfig);\r\n        }\r\n        \r\n        console.error(`[HTTP Fail] ${requestWithConfig.method || 'GET'} ${url}`, err);\r\n        \r\n        // 超时重试\r\n        if (err.errMsg && err.errMsg.includes('timeout') && requestWithConfig.retryCount < CONFIG.MAX_RETRY) {\r\n          requestWithConfig.retryCount = (requestWithConfig.retryCount || 0) + 1;\r\n          \r\n          console.log(`[HTTP Retry] ${requestWithConfig.method || 'GET'} ${url} - Attempt ${requestWithConfig.retryCount}`);\r\n          \r\n          setTimeout(() => {\r\n            resolve(request(requestWithConfig));\r\n          }, 1000 * requestWithConfig.retryCount); // 递增重试延迟\r\n          return;\r\n        }\r\n        \r\n        if (!requestWithConfig.hideErrorToast) {\r\n          uni.showToast({\r\n            title: '网络请求失败',\r\n            icon: 'none'\r\n          });\r\n        }\r\n        \r\n        reject(err);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * GET请求\r\n * @param {String} url 请求地址\r\n * @param {Object} data 请求参数\r\n * @param {Object} config 请求配置\r\n */\r\nconst get = (url, data = {}, config = {}) => {\r\n  return request({\r\n    url,\r\n    data,\r\n    method: 'GET',\r\n    retryCount: 0,\r\n    ...config\r\n  });\r\n};\r\n\r\n/**\r\n * POST请求\r\n * @param {String} url 请求地址\r\n * @param {Object} data 请求参数\r\n * @param {Object} config 请求配置\r\n */\r\nconst post = (url, data = {}, config = {}) => {\r\n  return request({\r\n    url,\r\n    data,\r\n    method: 'POST',\r\n    retryCount: 0,\r\n    ...config\r\n  });\r\n};\r\n\r\n/**\r\n * PUT请求\r\n * @param {String} url 请求地址\r\n * @param {Object} data 请求参数\r\n * @param {Object} config 请求配置\r\n */\r\nconst put = (url, data = {}, config = {}) => {\r\n  return request({\r\n    url,\r\n    data,\r\n    method: 'PUT',\r\n    retryCount: 0,\r\n    ...config\r\n  });\r\n};\r\n\r\n/**\r\n * DELETE请求\r\n * @param {String} url 请求地址\r\n * @param {Object} data 请求参数\r\n * @param {Object} config 请求配置\r\n */\r\nconst del = (url, data = {}, config = {}) => {\r\n  return request({\r\n    url,\r\n    data,\r\n    method: 'DELETE',\r\n    retryCount: 0,\r\n    ...config\r\n  });\r\n};\r\n\r\n// 导出HTTP请求方法，但不暴露BASE_URL\r\nexport default {\r\n  request,\r\n  get,\r\n  post,\r\n  put,\r\n  del,\r\n  delete: del, // 添加delete别名\r\n  // 提供getApiPath方法，方便直接使用\r\n  getApiPath: config.getApiPath,\r\n  // 提供getBaseUrl方法，方便直接使用\r\n  getBaseUrl: config.getBaseUrl,\r\n  // 提供配置对象\r\n  config\r\n};"],"names":["config","refreshToken","uni"],"mappings":"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"}
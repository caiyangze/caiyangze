{"version":3,"file":"ai-matchmaker.js","sources":["api/ai-matchmaker.js"],"sourcesContent":["/**\n * AI红娘相关API接口\n */\n\nimport { request } from '@/utils/request.js';\n\nconst AI_MATCHMAKER_BASE_URL = '/api/ai-matchmaker';\n\n/**\n * 获取AI红娘信息\n */\nexport function getAiMatchmakerInfo() {\n\treturn request({\n\t\turl: `${AI_MATCHMAKER_BASE_URL}/info`,\n\t\tmethod: 'GET'\n\t});\n}\n\n/**\n * 文字对话\n * @param {number} userId - 用户ID\n * @param {string} message - 用户消息\n */\nexport function chatWithAi(userId, message) {\n\treturn request({\n\t\turl: `${AI_MATCHMAKER_BASE_URL}/chat`,\n\t\tmethod: 'POST',\n\t\theader: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded'\n\t\t},\n\t\tdata: {\n\t\t\tuserId: userId,\n\t\t\tmessage: message\n\t\t}\n\t});\n}\n\n/**\n * 流式对话\n * @param {number} userId - 用户ID\n * @param {string} message - 用户消息\n */\nexport function chatStreamWithAi(userId, message) {\n\treturn new Promise((resolve, reject) => {\n\t\t// 使用uni.request创建SSE连接\n\t\tconst requestTask = uni.request({\n\t\t\turl: `${getApp().globalData.baseUrl}${AI_MATCHMAKER_BASE_URL}/chat-stream`,\n\t\t\tmethod: 'POST',\n\t\t\theader: {\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t\t'Accept': 'text/event-stream'\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\tuserId: userId,\n\t\t\t\tmessage: message\n\t\t\t},\n\t\t\tsuccess: (res) => {\n\t\t\t\tresolve(res.data);\n\t\t\t},\n\t\t\tfail: (error) => {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn requestTask;\n\t});\n}\n\n/**\n * 语音识别\n * @param {number} userId - 用户ID\n * @param {File} audioFile - 音频文件\n */\nexport function speechToText(userId, audioFile) {\n\treturn request({\n\t\turl: `${AI_MATCHMAKER_BASE_URL}/speech-to-text`,\n\t\tmethod: 'POST',\n\t\theader: {\n\t\t\t'Content-Type': 'multipart/form-data'\n\t\t},\n\t\tdata: {\n\t\t\tuserId: userId,\n\t\t\taudio: audioFile\n\t\t}\n\t});\n}\n\n/**\n * 语音合成\n * @param {number} userId - 用户ID\n * @param {string} text - 要转换的文字\n * @param {string} voiceType - 声音类型\n */\nexport function textToSpeech(userId, text, voiceType = 'LONGXIAOCHUN') {\n\treturn request({\n\t\turl: `${AI_MATCHMAKER_BASE_URL}/text-to-speech`,\n\t\tmethod: 'POST',\n\t\theader: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded'\n\t\t},\n\t\tdata: {\n\t\t\tuserId: userId,\n\t\t\ttext: text,\n\t\t\tvoiceType: voiceType\n\t\t}\n\t});\n}\n\n/**\n * 语音对话（语音输入，语音输出）\n * @param {number} userId - 用户ID\n * @param {File} audioFile - 音频文件\n * @param {string} voiceType - 回复声音类型\n */\nexport function voiceChat(userId, audioFile, voiceType = 'LONGXIAOCHUN') {\n\treturn request({\n\t\turl: `${AI_MATCHMAKER_BASE_URL}/voice-chat`,\n\t\tmethod: 'POST',\n\t\theader: {\n\t\t\t'Content-Type': 'multipart/form-data'\n\t\t},\n\t\tdata: {\n\t\t\tuserId: userId,\n\t\t\taudio: audioFile,\n\t\t\tvoiceType: voiceType\n\t\t}\n\t});\n}\n\n/**\n * 图片解析\n * @param {number} userId - 用户ID\n * @param {File} imageFile - 图片文件\n * @param {string} question - 用户问题\n */\nexport function analyzeImage(userId, imageFile, question = '请帮我分析这张图片') {\n\treturn request({\n\t\turl: `${AI_MATCHMAKER_BASE_URL}/analyze-image`,\n\t\tmethod: 'POST',\n\t\theader: {\n\t\t\t'Content-Type': 'multipart/form-data'\n\t\t},\n\t\tdata: {\n\t\t\tuserId: userId,\n\t\t\timage: imageFile,\n\t\t\tquestion: question\n\t\t}\n\t});\n}\n\n/**\n * 获取对话历史\n * @param {number} userId - 用户ID\n * @param {number} page - 页码\n * @param {number} size - 每页数量\n */\nexport function getChatHistory(userId, page = 1, size = 20) {\n\treturn request({\n\t\turl: `${AI_MATCHMAKER_BASE_URL}/chat-history`,\n\t\tmethod: 'GET',\n\t\tdata: {\n\t\t\tuserId: userId,\n\t\t\tpage: page,\n\t\t\tsize: size\n\t\t}\n\t});\n}\n\n/**\n * 创建音频播放器\n * @param {string} audioBase64 - Base64编码的音频数据\n * @returns {Promise} 播放Promise\n */\nexport function playAudioFromBase64(audioBase64) {\n\treturn new Promise((resolve, reject) => {\n\t\ttry {\n\t\t\t// 创建临时文件\n\t\t\tconst fs = uni.getFileSystemManager();\n\t\t\tconst tempFilePath = `${uni.env.USER_DATA_PATH}/temp_audio_${Date.now()}.wav`;\n\t\t\t\n\t\t\t// 将Base64转换为ArrayBuffer\n\t\t\tconst buffer = uni.base64ToArrayBuffer(audioBase64);\n\t\t\t\n\t\t\t// 写入临时文件\n\t\t\tfs.writeFile({\n\t\t\t\tfilePath: tempFilePath,\n\t\t\t\tdata: buffer,\n\t\t\t\tsuccess: () => {\n\t\t\t\t\t// 创建音频播放器\n\t\t\t\t\tconst audioContext = uni.createInnerAudioContext();\n\t\t\t\t\taudioContext.src = tempFilePath;\n\t\t\t\t\t\n\t\t\t\t\taudioContext.onPlay(() => {\n\t\t\t\t\t\tconsole.log('音频开始播放');\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\taudioContext.onEnded(() => {\n\t\t\t\t\t\tconsole.log('音频播放结束');\n\t\t\t\t\t\taudioContext.destroy();\n\t\t\t\t\t\t// 清理临时文件\n\t\t\t\t\t\tfs.unlink({\n\t\t\t\t\t\t\tfilePath: tempFilePath,\n\t\t\t\t\t\t\tsuccess: () => console.log('临时音频文件已清理'),\n\t\t\t\t\t\t\tfail: (error) => console.error('清理临时音频文件失败:', error)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\taudioContext.onError((error) => {\n\t\t\t\t\t\tconsole.error('音频播放失败:', error);\n\t\t\t\t\t\taudioContext.destroy();\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// 开始播放\n\t\t\t\t\taudioContext.play();\n\t\t\t\t},\n\t\t\t\tfail: (error) => {\n\t\t\t\t\tconsole.error('写入临时音频文件失败:', error);\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.error('播放音频失败:', error);\n\t\t\treject(error);\n\t\t}\n\t});\n}\n\n/**\n * 录音管理器\n */\nexport class AudioRecorder {\n\tconstructor() {\n\t\tthis.recorderManager = uni.getRecorderManager();\n\t\tthis.isRecording = false;\n\t\tthis.recordingPromise = null;\n\t\t\n\t\t// 录音配置\n\t\tthis.options = {\n\t\t\tduration: 60000, // 最长录音时间60秒\n\t\t\tsampleRate: 16000, // 采样率\n\t\t\tnumberOfChannels: 1, // 声道数\n\t\t\tencodeBitRate: 48000, // 编码码率\n\t\t\tformat: 'wav', // 音频格式\n\t\t\tframeSize: 50 // 指定帧大小，单位 KB\n\t\t};\n\t\t\n\t\tthis.setupEventListeners();\n\t}\n\t\n\tsetupEventListeners() {\n\t\tthis.recorderManager.onStart(() => {\n\t\t\tconsole.log('录音开始');\n\t\t\tthis.isRecording = true;\n\t\t});\n\t\t\n\t\tthis.recorderManager.onStop((res) => {\n\t\t\tconsole.log('录音结束:', res);\n\t\t\tthis.isRecording = false;\n\t\t\tif (this.recordingPromise) {\n\t\t\t\tthis.recordingPromise.resolve(res);\n\t\t\t\tthis.recordingPromise = null;\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.recorderManager.onError((error) => {\n\t\t\tconsole.error('录音错误:', error);\n\t\t\tthis.isRecording = false;\n\t\t\tif (this.recordingPromise) {\n\t\t\t\tthis.recordingPromise.reject(error);\n\t\t\t\tthis.recordingPromise = null;\n\t\t\t}\n\t\t});\n\t}\n\t\n\t/**\n\t * 开始录音\n\t */\n\tstartRecording() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (this.isRecording) {\n\t\t\t\treject(new Error('正在录音中'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tthis.recordingPromise = { resolve, reject };\n\t\t\t\n\t\t\t// 检查录音权限\n\t\t\tuni.authorize({\n\t\t\t\tscope: 'scope.record',\n\t\t\t\tsuccess: () => {\n\t\t\t\t\tthis.recorderManager.start(this.options);\n\t\t\t\t},\n\t\t\t\tfail: () => {\n\t\t\t\t\treject(new Error('录音权限被拒绝'));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\t\n\t/**\n\t * 停止录音\n\t */\n\tstopRecording() {\n\t\tif (this.isRecording) {\n\t\t\tthis.recorderManager.stop();\n\t\t}\n\t}\n\t\n\t/**\n\t * 取消录音\n\t */\n\tcancelRecording() {\n\t\tif (this.isRecording) {\n\t\t\tthis.recorderManager.stop();\n\t\t\tif (this.recordingPromise) {\n\t\t\t\tthis.recordingPromise.reject(new Error('录音被取消'));\n\t\t\t\tthis.recordingPromise = null;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * 工具函数：将文件转换为Base64\n * @param {string} filePath - 文件路径\n * @returns {Promise<string>} Base64字符串\n */\nexport function fileToBase64(filePath) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst fs = uni.getFileSystemManager();\n\t\tfs.readFile({\n\t\t\tfilePath: filePath,\n\t\t\tencoding: 'base64',\n\t\t\tsuccess: (res) => {\n\t\t\t\tresolve(res.data);\n\t\t\t},\n\t\t\tfail: (error) => {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * 工具函数：格式化文件大小\n * @param {number} bytes - 字节数\n * @returns {string} 格式化后的大小\n */\nexport function formatFileSize(bytes) {\n\tif (bytes === 0) return '0 B';\n\tconst k = 1024;\n\tconst sizes = ['B', 'KB', 'MB', 'GB'];\n\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n"],"names":["request","uni"],"mappings":"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"}
{"version":3,"file":"token-debug.js","sources":["utils/token-debug.js"],"sourcesContent":["/**\r\n * Token调试工具\r\n */\r\n\r\n/**\r\n * 检查token状态\r\n */\r\nexport function checkTokenStatus() {\r\n  const token = uni.getStorageSync('token');\r\n  const refreshToken = uni.getStorageSync('refreshToken');\r\n  const userInfo = uni.getStorageSync('userInfo');\r\n  \r\n  console.log('=== Token状态检查 ===');\r\n  console.log('Token:', token ? token.substring(0, 30) + '...' : 'null');\r\n  console.log('RefreshToken:', refreshToken ? refreshToken.substring(0, 30) + '...' : 'null');\r\n  console.log('UserInfo:', userInfo);\r\n  console.log('Token长度:', token ? token.length : 0);\r\n  \r\n  // 检查token格式\r\n  if (token) {\r\n    try {\r\n      // 如果是JWT token，尝试解析\r\n      const parts = token.split('.');\r\n      if (parts.length === 3) {\r\n        const payload = JSON.parse(atob(parts[1]));\r\n        console.log('JWT Payload:', payload);\r\n        console.log('Token过期时间:', new Date(payload.exp * 1000));\r\n        console.log('当前时间:', new Date());\r\n        console.log('Token是否过期:', payload.exp * 1000 < Date.now());\r\n      }\r\n    } catch (error) {\r\n      console.log('Token不是JWT格式或解析失败:', error);\r\n    }\r\n  }\r\n  \r\n  return {\r\n    hasToken: !!token,\r\n    hasRefreshToken: !!refreshToken,\r\n    hasUserInfo: !!userInfo,\r\n    token: token,\r\n    tokenLength: token ? token.length : 0\r\n  };\r\n}\r\n\r\n/**\r\n * 清除所有登录信息\r\n */\r\nexport function clearLoginInfo() {\r\n  console.log('清除登录信息...');\r\n  uni.removeStorageSync('token');\r\n  uni.removeStorageSync('refreshToken');\r\n  uni.removeStorageSync('userInfo');\r\n  console.log('登录信息已清除');\r\n}\r\n\r\n/**\r\n * 设置测试token\r\n */\r\nexport function setTestToken() {\r\n  const testToken = 'test_token_' + Date.now();\r\n  uni.setStorageSync('token', testToken);\r\n  console.log('设置测试token:', testToken);\r\n}\r\n\r\n/**\r\n * 测试API请求\r\n */\r\nexport const testApiRequest = async function() {\r\n  console.log('=== 测试API请求 ===');\r\n  \r\n  const status = checkTokenStatus();\r\n  if (!status.hasToken) {\r\n    console.error('没有token，无法测试');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    // 测试获取好友列表接口\r\n    const response = await uni.request({\r\n      url: 'http://localhost:9001/follow/mutual',\r\n      method: 'GET',\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        'token': status.token,\r\n        'Authorization': `Bearer ${status.token}`\r\n      }\r\n    });\r\n    \r\n    console.log('API测试响应:', response);\r\n    \r\n    if (response.statusCode === 200) {\r\n      console.log('✅ API请求成功');\r\n      return response.data;\r\n    } else {\r\n      console.error('❌ API请求失败:', response);\r\n      return null;\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ API请求异常:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * 检查网络连接\r\n */\r\nexport function checkNetworkStatus() {\r\n  uni.getNetworkType({\r\n    success: (res) => {\r\n      console.log('=== 网络状态 ===');\r\n      console.log('网络类型:', res.networkType);\r\n      console.log('是否连接:', res.networkType !== 'none');\r\n    },\r\n    fail: (error) => {\r\n      console.error('获取网络状态失败:', error);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * 完整的登录状态诊断\r\n */\r\nexport const diagnoseLoginStatus = async function() {\r\n  console.log('🔍 开始登录状态诊断...');\r\n  \r\n  // 1. 检查网络\r\n  checkNetworkStatus();\r\n  \r\n  // 2. 检查token\r\n  const tokenStatus = checkTokenStatus();\r\n  \r\n  // 3. 测试API\r\n  if (tokenStatus.hasToken) {\r\n    await testApiRequest();\r\n  }\r\n  \r\n  // 4. 给出建议\r\n  console.log('=== 诊断建议 ===');\r\n  if (!tokenStatus.hasToken) {\r\n    console.log('❌ 没有token，请重新登录');\r\n  } else if (!tokenStatus.hasUserInfo) {\r\n    console.log('⚠️ 有token但没有用户信息，可能需要重新获取用户信息');\r\n  } else {\r\n    console.log('✅ 登录状态看起来正常，可能是服务器端问题');\r\n  }\r\n  \r\n  return tokenStatus;\r\n}\r\n"],"names":["uni"],"mappings":"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"}

{"version":3,"file":"websocket.js","sources":["utils/websocket.js"],"sourcesContent":["/**\r\n * WebSocket管理器\r\n */\r\n\r\nimport config from '@/api/config';\r\n\r\nclass WebSocketManager {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.isConnected = false;\r\n    this.reconnectTimer = null;\r\n    this.heartbeatTimer = null;\r\n    this.reconnectCount = 0;\r\n    this.maxReconnectCount = 5;\r\n    this.heartbeatInterval = 30000; // 30秒心跳\r\n    this.reconnectInterval = 5000; // 5秒重连间隔\r\n    this.messageHandlers = new Map();\r\n    this.connectionPromise = null;\r\n  }\r\n\r\n  /**\r\n   * 连接WebSocket\r\n   * @param {String} token JWT token\r\n   */\r\n  connect(token) {\r\n    if (this.isConnected || this.connectionPromise) {\r\n      return this.connectionPromise || Promise.resolve();\r\n    }\r\n\r\n    this.connectionPromise = new Promise((resolve, reject) => {\r\n      try {\r\n        const wsUrl = `${config.getWebSocketUrl()}/chat?token=${encodeURIComponent(token)}`;\r\n        console.log('WebSocket连接地址:', wsUrl);\r\n\r\n        this.socket = uni.connectSocket({\r\n          url: wsUrl,\r\n          success: () => {\r\n            console.log('WebSocket连接请求发送成功');\r\n          },\r\n          fail: (error) => {\r\n            console.error('WebSocket连接失败:', error);\r\n            this.connectionPromise = null;\r\n            reject(error);\r\n          }\r\n        });\r\n\r\n        // 连接打开\r\n        this.socket.onOpen(() => {\r\n          console.log('WebSocket连接已建立');\r\n          this.isConnected = true;\r\n          this.reconnectCount = 0;\r\n          this.startHeartbeat();\r\n          this.connectionPromise = null;\r\n          resolve();\r\n        });\r\n\r\n        // 接收消息\r\n        this.socket.onMessage((res) => {\r\n          try {\r\n            const message = JSON.parse(res.data);\r\n            console.log('收到WebSocket消息:', message);\r\n            this.handleMessage(message);\r\n          } catch (error) {\r\n            console.error('解析WebSocket消息失败:', error);\r\n          }\r\n        });\r\n\r\n        // 连接关闭\r\n        this.socket.onClose((res) => {\r\n          console.log('WebSocket连接已关闭:', res);\r\n          this.isConnected = false;\r\n          this.stopHeartbeat();\r\n          this.connectionPromise = null;\r\n          \r\n          // 如果不是主动关闭，尝试重连\r\n          if (res.code !== 1000 && this.reconnectCount < this.maxReconnectCount) {\r\n            this.scheduleReconnect(token);\r\n          }\r\n        });\r\n\r\n        // 连接错误\r\n        this.socket.onError((error) => {\r\n          console.error('WebSocket连接错误:', error);\r\n          this.isConnected = false;\r\n          this.connectionPromise = null;\r\n          reject(error);\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error('创建WebSocket连接失败:', error);\r\n        this.connectionPromise = null;\r\n        reject(error);\r\n      }\r\n    });\r\n\r\n    return this.connectionPromise;\r\n  }\r\n\r\n  /**\r\n   * 断开连接\r\n   */\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.close({\r\n        code: 1000,\r\n        reason: '主动断开连接'\r\n      });\r\n    }\r\n    this.isConnected = false;\r\n    this.stopHeartbeat();\r\n    this.clearReconnectTimer();\r\n    this.connectionPromise = null;\r\n  }\r\n\r\n  /**\r\n   * 发送消息\r\n   * @param {Object} message 消息对象\r\n   */\r\n  send(message) {\r\n    if (!this.isConnected || !this.socket) {\r\n      console.warn('WebSocket未连接，无法发送消息');\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const messageStr = JSON.stringify(message);\r\n      this.socket.send({\r\n        data: messageStr,\r\n        success: () => {\r\n          console.log('WebSocket消息发送成功:', message);\r\n        },\r\n        fail: (error) => {\r\n          console.error('WebSocket消息发送失败:', error);\r\n        }\r\n      });\r\n      return true;\r\n    } catch (error) {\r\n      console.error('发送WebSocket消息失败:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 发送聊天消息\r\n   * @param {Number} receiverId 接收者ID\r\n   * @param {String} content 消息内容\r\n   * @param {Number} messageType 消息类型\r\n   * @param {Number} tempId 临时消息ID\r\n   */\r\n  sendChatMessage(receiverId, content, messageType = 1, tempId = null) {\r\n    const messageData = {\r\n      type: 'CHAT',\r\n      timestamp: Date.now(),\r\n      data: {\r\n        receiverId,\r\n        messageType,\r\n        content\r\n      }\r\n    };\r\n\r\n    // 如果有临时ID，添加到消息中\r\n    if (tempId) {\r\n      messageData.tempId = tempId;\r\n    }\r\n\r\n    console.log('发送WebSocket消息:', messageData);\r\n    return this.send(messageData);\r\n  }\r\n\r\n  /**\r\n   * 发送正在输入状态\r\n   * @param {Number} receiverId 接收者ID\r\n   */\r\n  sendTyping(receiverId) {\r\n    return this.send({\r\n      type: 'TYPING',\r\n      receiverId,\r\n      timestamp: Date.now(),\r\n      data: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 发送已读回执\r\n   * @param {Number} messageId 消息ID\r\n   * @param {Number} conversationId 会话ID\r\n   */\r\n  sendReadReceipt(messageId, conversationId) {\r\n    return this.send({\r\n      type: 'READ',\r\n      messageId,\r\n      timestamp: Date.now(),\r\n      data: conversationId\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 注册消息处理器\r\n   * @param {String} type 消息类型\r\n   * @param {Function} handler 处理函数\r\n   */\r\n  onMessage(type, handler) {\r\n    if (!this.messageHandlers.has(type)) {\r\n      this.messageHandlers.set(type, []);\r\n    }\r\n    this.messageHandlers.get(type).push(handler);\r\n  }\r\n\r\n  /**\r\n   * 移除消息处理器\r\n   * @param {String} type 消息类型\r\n   * @param {Function} handler 处理函数\r\n   */\r\n  offMessage(type, handler) {\r\n    if (this.messageHandlers.has(type)) {\r\n      const handlers = this.messageHandlers.get(type);\r\n      const index = handlers.indexOf(handler);\r\n      if (index > -1) {\r\n        handlers.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理接收到的消息\r\n   * @param {Object} message 消息对象\r\n   */\r\n  handleMessage(message) {\r\n    const { type } = message;\r\n    if (this.messageHandlers.has(type)) {\r\n      const handlers = this.messageHandlers.get(type);\r\n      handlers.forEach(handler => {\r\n        try {\r\n          handler(message);\r\n        } catch (error) {\r\n          console.error('消息处理器执行失败:', error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 开始心跳\r\n   */\r\n  startHeartbeat() {\r\n    this.stopHeartbeat();\r\n    this.heartbeatTimer = setInterval(() => {\r\n      this.send({\r\n        type: 'HEARTBEAT',\r\n        timestamp: Date.now(),\r\n        data: 'ping'\r\n      });\r\n    }, this.heartbeatInterval);\r\n  }\r\n\r\n  /**\r\n   * 停止心跳\r\n   */\r\n  stopHeartbeat() {\r\n    if (this.heartbeatTimer) {\r\n      clearInterval(this.heartbeatTimer);\r\n      this.heartbeatTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 安排重连\r\n   * @param {String} token JWT token\r\n   */\r\n  scheduleReconnect(token) {\r\n    this.clearReconnectTimer();\r\n    this.reconnectCount++;\r\n    \r\n    console.log(`准备第${this.reconnectCount}次重连...`);\r\n    \r\n    this.reconnectTimer = setTimeout(() => {\r\n      this.connect(token).catch(error => {\r\n        console.error('重连失败:', error);\r\n      });\r\n    }, this.reconnectInterval * this.reconnectCount);\r\n  }\r\n\r\n  /**\r\n   * 清除重连定时器\r\n   */\r\n  clearReconnectTimer() {\r\n    if (this.reconnectTimer) {\r\n      clearTimeout(this.reconnectTimer);\r\n      this.reconnectTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取连接状态\r\n   */\r\n  getConnectionStatus() {\r\n    return {\r\n      isConnected: this.isConnected,\r\n      reconnectCount: this.reconnectCount\r\n    };\r\n  }\r\n}\r\n\r\n// 创建全局WebSocket管理器实例\r\nconst wsManager = new WebSocketManager();\r\n\r\nexport default wsManager;\r\n"],"names":["config","uni"],"mappings":"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"}

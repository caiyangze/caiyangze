{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["/**\n * 网络请求工具\n */\n\n// 获取基础URL\nfunction getBaseUrl() {\n\t// 开发环境\n\tif (process.env.NODE_ENV === 'development') {\n\t\treturn 'http://localhost:8084';\n\t}\n\t\n\t// 生产环境\n\treturn getApp().globalData.baseUrl || 'http://localhost:8084';\n}\n\n/**\n * 统一请求方法\n * @param {Object} options 请求配置\n */\nexport function request(options) {\n\treturn new Promise((resolve, reject) => {\n\t\t// 获取token\n\t\tconst token = uni.getStorageSync('token');\n\t\t\n\t\t// 构建完整URL\n\t\tconst baseUrl = getBaseUrl();\n\t\tconst url = options.url.startsWith('http') ? options.url : baseUrl + options.url;\n\t\t\n\t\t// 默认请求头\n\t\tconst defaultHeaders = {\n\t\t\t'Content-Type': 'application/json'\n\t\t};\n\t\t\n\t\t// 添加token\n\t\tif (token) {\n\t\t\tdefaultHeaders['Authorization'] = `Bearer ${token}`;\n\t\t}\n\t\t\n\t\t// 合并请求头\n\t\tconst headers = Object.assign(defaultHeaders, options.header || {});\n\t\t\n\t\t// 发起请求\n\t\tuni.request({\n\t\t\turl: url,\n\t\t\tmethod: options.method || 'GET',\n\t\t\tdata: options.data || {},\n\t\t\theader: headers,\n\t\t\ttimeout: options.timeout || 30000,\n\t\t\tsuccess: (res) => {\n\t\t\t\tconsole.log('请求成功:', {\n\t\t\t\t\turl: url,\n\t\t\t\t\tmethod: options.method || 'GET',\n\t\t\t\t\tdata: options.data,\n\t\t\t\t\tresponse: res.data\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// 检查HTTP状态码\n\t\t\t\tif (res.statusCode >= 200 && res.statusCode < 300) {\n\t\t\t\t\tresolve(res.data);\n\t\t\t\t} else {\n\t\t\t\t\tconst error = new Error(`HTTP ${res.statusCode}: ${res.data.message || '请求失败'}`);\n\t\t\t\t\terror.code = res.statusCode;\n\t\t\t\t\terror.data = res.data;\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t},\n\t\t\tfail: (error) => {\n\t\t\t\tconsole.error('请求失败:', {\n\t\t\t\t\turl: url,\n\t\t\t\t\tmethod: options.method || 'GET',\n\t\t\t\t\tdata: options.data,\n\t\t\t\t\terror: error\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// 网络错误处理\n\t\t\t\tlet errorMessage = '网络请求失败';\n\t\t\t\tif (error.errMsg) {\n\t\t\t\t\tif (error.errMsg.includes('timeout')) {\n\t\t\t\t\t\terrorMessage = '请求超时，请检查网络连接';\n\t\t\t\t\t} else if (error.errMsg.includes('fail')) {\n\t\t\t\t\t\terrorMessage = '网络连接失败，请检查网络设置';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst requestError = new Error(errorMessage);\n\t\t\t\trequestError.code = 'NETWORK_ERROR';\n\t\t\t\trequestError.originalError = error;\n\t\t\t\treject(requestError);\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * GET请求\n * @param {string} url 请求地址\n * @param {Object} data 请求参数\n * @param {Object} options 其他配置\n */\nexport function get(url, data = {}, options = {}) {\n\treturn request({\n\t\turl: url,\n\t\tmethod: 'GET',\n\t\tdata: data,\n\t\t...options\n\t});\n}\n\n/**\n * POST请求\n * @param {string} url 请求地址\n * @param {Object} data 请求数据\n * @param {Object} options 其他配置\n */\nexport function post(url, data = {}, options = {}) {\n\treturn request({\n\t\turl: url,\n\t\tmethod: 'POST',\n\t\tdata: data,\n\t\t...options\n\t});\n}\n\n/**\n * PUT请求\n * @param {string} url 请求地址\n * @param {Object} data 请求数据\n * @param {Object} options 其他配置\n */\nexport function put(url, data = {}, options = {}) {\n\treturn request({\n\t\turl: url,\n\t\tmethod: 'PUT',\n\t\tdata: data,\n\t\t...options\n\t});\n}\n\n/**\n * DELETE请求\n * @param {string} url 请求地址\n * @param {Object} data 请求参数\n * @param {Object} options 其他配置\n */\nexport function del(url, data = {}, options = {}) {\n\treturn request({\n\t\turl: url,\n\t\tmethod: 'DELETE',\n\t\tdata: data,\n\t\t...options\n\t});\n}\n\n/**\n * 文件上传\n * @param {string} url 上传地址\n * @param {string} filePath 文件路径\n * @param {Object} formData 表单数据\n * @param {Object} options 其他配置\n */\nexport function upload(url, filePath, formData = {}, options = {}) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst token = uni.getStorageSync('token');\n\t\tconst baseUrl = getBaseUrl();\n\t\tconst fullUrl = url.startsWith('http') ? url : baseUrl + url;\n\t\t\n\t\tconst header = {\n\t\t\t'Authorization': token ? `Bearer ${token}` : ''\n\t\t};\n\t\t\n\t\tuni.uploadFile({\n\t\t\turl: fullUrl,\n\t\t\tfilePath: filePath,\n\t\t\tname: options.name || 'file',\n\t\t\tformData: formData,\n\t\t\theader: header,\n\t\t\tsuccess: (res) => {\n\t\t\t\tconsole.log('上传成功:', res);\n\t\t\t\ttry {\n\t\t\t\t\tconst data = JSON.parse(res.data);\n\t\t\t\t\tresolve(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tresolve(res.data);\n\t\t\t\t}\n\t\t\t},\n\t\t\tfail: (error) => {\n\t\t\t\tconsole.error('上传失败:', error);\n\t\t\t\treject(new Error('文件上传失败'));\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * 下载文件\n * @param {string} url 下载地址\n * @param {Object} options 其他配置\n */\nexport function download(url, options = {}) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst token = uni.getStorageSync('token');\n\t\tconst baseUrl = getBaseUrl();\n\t\tconst fullUrl = url.startsWith('http') ? url : baseUrl + url;\n\t\t\n\t\tconst header = {\n\t\t\t'Authorization': token ? `Bearer ${token}` : ''\n\t\t};\n\t\t\n\t\tuni.downloadFile({\n\t\t\turl: fullUrl,\n\t\t\theader: header,\n\t\t\tsuccess: (res) => {\n\t\t\t\tconsole.log('下载成功:', res);\n\t\t\t\tresolve(res);\n\t\t\t},\n\t\t\tfail: (error) => {\n\t\t\t\tconsole.error('下载失败:', error);\n\t\t\t\treject(new Error('文件下载失败'));\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * 请求拦截器（用于统一处理请求前的逻辑）\n */\nexport function requestInterceptor(config) {\n\t// 可以在这里添加请求前的统一处理逻辑\n\t// 比如显示loading、添加公共参数等\n\treturn config;\n}\n\n/**\n * 响应拦截器（用于统一处理响应后的逻辑）\n */\nexport function responseInterceptor(response) {\n\t// 可以在这里添加响应后的统一处理逻辑\n\t// 比如隐藏loading、统一错误处理等\n\treturn response;\n}\n\n// 默认导出\nexport default {\n\trequest,\n\tget,\n\tpost,\n\tput,\n\tdel,\n\tupload,\n\tdownload,\n\trequestInterceptor,\n\tresponseInterceptor\n};\n"],"names":["uni"],"mappings":";;AAKA,SAAS,aAAa;AAEuB;AACpC,WAAA;AAAA,EACR;AAID;AAMO,SAAS,QAAQ,SAAS;AAChC,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEjC,UAAA,QAAQA,cAAAA,MAAI,eAAe,OAAO;AAGxC,UAAM,UAAU;AACV,UAAA,MAAM,QAAQ,IAAI,WAAW,MAAM,IAAI,QAAQ,MAAM,UAAU,QAAQ;AAG7E,UAAM,iBAAiB;AAAA,MACtB,gBAAgB;AAAA,IAAA;AAIjB,QAAI,OAAO;AACK,qBAAA,eAAe,IAAI,UAAU,KAAK;AAAA,IAClD;AAGA,UAAM,UAAU,OAAO,OAAO,gBAAgB,QAAQ,UAAU,CAAA,CAAE;AAGlEA,kBAAAA,MAAI,QAAQ;AAAA,MACX;AAAA,MACA,QAAQ,QAAQ,UAAU;AAAA,MAC1B,MAAM,QAAQ,QAAQ,CAAC;AAAA,MACvB,QAAQ;AAAA,MACR,SAAS,QAAQ,WAAW;AAAA,MAC5B,SAAS,CAAC,QAAQ;AACjBA,sBAAAA,MAAA,MAAA,OAAA,0BAAY,SAAS;AAAA,UACpB;AAAA,UACA,QAAQ,QAAQ,UAAU;AAAA,UAC1B,MAAM,QAAQ;AAAA,UACd,UAAU,IAAI;AAAA,QAAA,CACd;AAGD,YAAI,IAAI,cAAc,OAAO,IAAI,aAAa,KAAK;AAClD,kBAAQ,IAAI,IAAI;AAAA,QAAA,OACV;AACA,gBAAA,QAAQ,IAAI,MAAM,QAAQ,IAAI,UAAU,KAAK,IAAI,KAAK,WAAW,MAAM,EAAE;AAC/E,gBAAM,OAAO,IAAI;AACjB,gBAAM,OAAO,IAAI;AACjB,iBAAO,KAAK;AAAA,QACb;AAAA,MACD;AAAA,MACA,MAAM,CAAC,UAAU;AAChBA,sBAAAA,MAAA,MAAA,SAAA,0BAAc,SAAS;AAAA,UACtB;AAAA,UACA,QAAQ,QAAQ,UAAU;AAAA,UAC1B,MAAM,QAAQ;AAAA,UACd;AAAA,QAAA,CACA;AAGD,YAAI,eAAe;AACnB,YAAI,MAAM,QAAQ;AACjB,cAAI,MAAM,OAAO,SAAS,SAAS,GAAG;AACtB,2BAAA;AAAA,UACL,WAAA,MAAM,OAAO,SAAS,MAAM,GAAG;AAC1B,2BAAA;AAAA,UAChB;AAAA,QACD;AAEM,cAAA,eAAe,IAAI,MAAM,YAAY;AAC3C,qBAAa,OAAO;AACpB,qBAAa,gBAAgB;AAC7B,eAAO,YAAY;AAAA,MACpB;AAAA,IAAA,CACA;AAAA,EAAA,CACD;AACF;;"}